#!/bin/bash

# ModemManager Auto-Fix
# Usage: modemmanager-autofix [start|stop|restart|status|fix-now|logs]

# Configuration
CHECK_INTERVAL=30  # Check every 30 seconds
MAX_RETRIES=3      # Maximum retry attempts
RETRY_DELAY=10     # Delay between retries
PID_FILE="/var/run/modemmanager-autofix.pid"
LOG_FILE="/var/log/modemmanager-autofix.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    local type="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    # Log to syslog
    logger -t "ModemManager-AutoFix" "[$type] $message"
    
    # Log to file
    echo "$timestamp [$type] $message" >> "$LOG_FILE"
    
    # Print to console if not daemon mode
    if [ "$DAEMON_MODE" != "1" ]; then
        case "$type" in
            "ERROR"|"ALERT") echo -e "${RED}[$type]${NC} $message" ;;
            "SUCCESS") echo -e "${GREEN}[$type]${NC} $message" ;;
            "WARNING") echo -e "${YELLOW}[$type]${NC} $message" ;;
            "INFO") echo -e "${BLUE}[$type]${NC} $message" ;;
            *) echo "[$type] $message" ;;
        esac
    fi
}

is_package_installed() {
    local package="$1"
    opkg list-installed | grep -q "^$package " 2>/dev/null
    return $?
}

check_modem_status() {
    # Check if ModemManager is running
    if ! pgrep -f "ModemManager" > /dev/null 2>&1; then
        log "WARNING" "ModemManager process not found"
        return 1
    fi
    
    # Check if dbus is running
    if ! pgrep -f "dbus" > /dev/null 2>&1; then
        log "WARNING" "D-Bus daemon not running"
        return 1
    fi
    
    # Wait a moment for services to stabilize
    sleep 2
    
    # Check if mmcli can communicate with ModemManager
    if ! mmcli -L > /dev/null 2>&1; then
        log "WARNING" "mmcli cannot communicate with ModemManager"
        return 1
    fi
    
    # Check if any modem is available
    local modem_list=$(mmcli -L 2>/dev/null)
    local modem_count=$(echo "$modem_list" | grep -c "Modem/" 2>/dev/null || echo "0")
    
    if [ "$modem_count" -eq 0 ]; then
        log "WARNING" "No modems detected by ModemManager"
        return 1
    fi
    
    log "DEBUG" "Found $modem_count modem(s)"
    return 0
}

apply_modemmanager_fix() {
    local retry_count=0
    
    log "INFO" "Applying ModemManager fix..."
    
    while [ $retry_count -lt $MAX_RETRIES ]; do
        retry_count=$((retry_count + 1))
        log "INFO" "Fix attempt $retry_count of $MAX_RETRIES"
        
        # Kill existing ModemManager processes gracefully
        log "DEBUG" "Stopping ModemManager service..."
        /etc/init.d/modemmanager stop 2>/dev/null
        sleep 2
        
        # Force kill if still running
        pkill -f ModemManager 2>/dev/null
        sleep 1
        killall -9 ModemManager 2>/dev/null
        sleep 2
        
        # Remove stale PID and socket files
        log "DEBUG" "Cleaning up stale files..."
        rm -f /var/run/dbus.pid
        rm -f /var/run/dbus/system_bus_socket
        rm -f /var/run/ModemManager.pid
        
        # Restart D-Bus
        log "DEBUG" "Restarting D-Bus..."
        /etc/init.d/dbus restart
        sleep 3
        
        # Start ModemManager
        log "DEBUG" "Starting ModemManager..."
        /etc/init.d/modemmanager start
        sleep 5
        
        # Wait for ModemManager to initialize
        local wait_count=0
        while [ $wait_count -lt 15 ]; do
            if pgrep -f "ModemManager" > /dev/null 2>&1; then
                break
            fi
            sleep 1
            wait_count=$((wait_count + 1))
        done
        
        # Additional wait for modem detection
        sleep 10
        
        # Check if fix worked
        if check_modem_status; then
            log "SUCCESS" "ModemManager fix applied successfully (attempt $retry_count)"
            return 0
        fi
        
        if [ $retry_count -lt $MAX_RETRIES ]; then
            log "WARNING" "Fix attempt $retry_count failed, retrying in ${RETRY_DELAY}s..."
            sleep $RETRY_DELAY
        fi
    done
    
    log "ERROR" "Failed to fix ModemManager after $MAX_RETRIES attempts"
    return 1
}

is_running() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            return 0
        else
            rm -f "$PID_FILE"
        fi
    fi
    return 1
}

monitor_loop() {
    # Create log directory if it doesn't exist
    mkdir -p "$(dirname "$LOG_FILE")"
    
    # Write PID file
    echo $$ > "$PID_FILE"
    
    log "INFO" "Starting ModemManager monitoring loop (PID: $$, interval: ${CHECK_INTERVAL}s)"
    
    # Trap signals for clean shutdown
    trap 'log "INFO" "Received shutdown signal, stopping monitor..."; rm -f "$PID_FILE"; exit 0' TERM INT QUIT
    
    # Initial delay to let system boot
    sleep 10
    
    while true; do
        
        # Check if ModemManager package is installed
        if ! is_package_installed "modemmanager"; then
            log "DEBUG" "ModemManager package not installed, waiting..."
            sleep 60
            continue
        fi
        
        # Check modem status
        if ! check_modem_status; then
            log "ALERT" "Modem issue detected, applying fix..."
            if apply_modemmanager_fix; then
                log "SUCCESS" "Fix applied successfully, resuming monitoring"
            else
                log "ERROR" "Fix failed, will retry on next check cycle"
            fi
        else
            log "DEBUG" "ModemManager and modem status OK"
        fi
        
        sleep $CHECK_INTERVAL
    done
}

start_daemon() {
    if is_running; then
        echo "ModemManager Auto-Fix is already running (PID: $(cat "$PID_FILE"))"
        return 1
    fi
    
    echo "Starting ModemManager Auto-Fix daemon..."
    export DAEMON_MODE=1
    nohup "$0" --monitor > /dev/null 2>&1 &
    
    # Wait a moment to check if it started successfully
    sleep 2
    if is_running; then
        echo "ModemManager Auto-Fix started successfully (PID: $(cat "$PID_FILE"))"
        return 0
    else
        echo "Failed to start ModemManager Auto-Fix"
        return 1
    fi
}

stop_daemon() {
    if is_running; then
        local pid=$(cat "$PID_FILE")
        echo "Stopping ModemManager Auto-Fix (PID: $pid)..."
        kill "$pid"
        
        # Wait for graceful shutdown
        local count=0
        while [ $count -lt 10 ] && kill -0 "$pid" 2>/dev/null; do
            sleep 1
            count=$((count + 1))
        done
        
        # Force kill if still running
        if kill -0 "$pid" 2>/dev/null; then
            kill -9 "$pid"
        fi
        
        rm -f "$PID_FILE"
        echo "ModemManager Auto-Fix stopped"
        return 0
    else
        echo "ModemManager Auto-Fix is not running"
        return 1
    fi
}

show_status() {
    if is_running; then
        local pid=$(cat "$PID_FILE")
        echo -e "${GREEN}ModemManager Auto-Fix is running${NC} (PID: $pid)"
        
        # Check modem status
        echo -n "Modem status: "
        if check_modem_status >/dev/null 2>&1; then
            echo -e "${GREEN}OK${NC}"
        else
            echo -e "${RED}PROBLEM${NC}"
        fi
        
        # Show last few log entries
        echo -e "\n${BLUE}Recent log entries:${NC}"
        tail -n 5 "$LOG_FILE" 2>/dev/null || echo "No log entries found"
    else
        echo -e "${RED}ModemManager Auto-Fix is not running${NC}"
    fi
}

show_logs() {
    if [ -f "$LOG_FILE" ]; then
        if [ "$1" = "-f" ]; then
            tail -f "$LOG_FILE"
        else
            tail -n 20 "$LOG_FILE"
        fi
    else
        echo "No log file found at $LOG_FILE"
    fi
}

# Main script logic
case "$1" in
    start)
        start_daemon
        ;;
    stop)
        stop_daemon
        ;;
    restart)
        stop_daemon
        sleep 2
        start_daemon
        ;;
    status)
        show_status
        ;;
    fix-now)
        echo "Applying manual ModemManager fix..."
        if apply_modemmanager_fix; then
            echo -e "${GREEN}Fix applied successfully${NC}"
        else
            echo -e "${RED}Fix failed${NC}"
            exit 1
        fi
        ;;
    logs)
        show_logs "$2"
        ;;
    --monitor)
        # Internal use - actual monitoring loop
        monitor_loop
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status|fix-now|logs [-f]}"
        echo ""
        echo "Commands:"
        echo "  start     - Start the background monitor daemon"
        echo "  stop      - Stop the background monitor daemon"
        echo "  restart   - Restart the daemon"
        echo "  status    - Show daemon and modem status"
        echo "  fix-now   - Apply ModemManager fix manually"
        echo "  logs      - Show recent log entries"
        echo "  logs -f   - Follow log entries in real-time"
        exit 1
        ;;
esac