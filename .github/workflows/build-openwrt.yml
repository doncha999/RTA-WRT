name: Generate RTA-WRT All Firmware

on:
  workflow_dispatch:
    inputs:
      base:
        description: "Select the Base Build:"
        required: true
        default: "openwrt"
        type: choice
        options:
          - openwrt
          - immortalwrt
      branch:
        description: "Select the Branch Build:"
        required: true
        default: "stable"
        type: choice
        options:
          - stable
          - snapshot
          - old-stable
      target:
        description: "Select device board"
        required: false
        default: "all-device"
        type: choice
        options:
          - all-device
          - Raspberry Pi 3
          - Raspberry Pi 4
          - x86-64
          - Amlogic s905
          - Amlogic s905 Beelink Mini
          - Amlogic s905 MXQ Pro Plus
          - Amlogic s905W
          - Amlogic s905W W95
          - Amlogic s905W X96 Mini
          - Amlogic s905W X96W
          - Amlogic s905X HG680P
          - Amlogic s905X B860H
          - Amlogic s905X Nexbox A95X
          - Amlogic s905X2
          - Amlogic s905X2 KM3
          - Amlogic s905X2 X96 Max 2G
          - Amlogic s905X3
          - Amlogic s905X3 H96 Max
          - Amlogic s905X3 HK1
          - Amlogic s905X3 X96 Max
          - Amlogic s905X4
          - Amlogic s912
          - Amlogic s912 H96 Pro Plus
          - Amlogic s912 X92
          - Allwinner H5 Orange Pi Zero Plus2
          - Allwinner H5 Orange Pi Zero Plus
          - Allwinner H5 Orange Pi Prime
          - Allwinner H5 Orange Pi PC2
          - Allwinner H6 Orange Pi Lite2
          - Allwinner H6 Orange Pi 1 Plus
          - Allwinner H6 Orange Pi 3
          - Allwinner H6 Orange Pi 3 LTS
          - Allwinner H616 Orange Pi Zero2
          - Allwinner H618 Orange Pi Zero2W
          - Allwinner H618 Orange Pi Zero3
          - Rockchip rk3318 H96-MAX
          - Rockchip rk3566 Orange Pi 3B
          - Rockchip rk3588s Orange Pi 5
      clean:
        description: "Do 'make clean' for each run"
        required: false
        default: true
        type: boolean

env:
  TZ: Asia/Jakarta
  DEBIAN_FRONTEND: noninteractive
  BASE: ${{ github.event.inputs.base }}
  BRANCH: ${{ github.event.inputs.branch }}
  TARGET: ${{ github.event.inputs.target }}
  CLEAN: ${{ github.event.inputs.clean }}

jobs:
  prebuild:
    runs-on: ubuntu-22.04
    name: ${{ github.event.inputs.release_branch }}
    outputs:
      target: ${{ steps.set-matrix.outputs.target }}
      base: ${{ steps.setupenv.outputs.base }}
      branch: ${{ steps.setupenv.outputs.branch }}
      date: ${{ steps.setupenv.outputs.date }}
      datetime: ${{ steps.setupenv.outputs.datetime }}
      datemonth: ${{ steps.setupenv.outputs.datemonth }}
      release_name: ${{ steps.setupenv.outputs.release_name }}
      release_tag: ${{ steps.setupenv.outputs.release_tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set Matrix Run
        id: set-matrix
        run: |
          echo "Selected target option: [ ${{ github.event.inputs.target }} ]"
          TARGET_JSON=$(cat << 'EOJ'
          {
            "target": [
              "Raspberry Pi 3",
              "Raspberry Pi 4",
              "x86-64",
              "Amlogic s905",
              "Amlogic s905 Beelink Mini",
              "Amlogic s905 MXQ Pro Plus",
              "Amlogic s905W",
              "Amlogic s905W W95",
              "Amlogic s905W X96 Mini",
              "Amlogic s905W X96W",
              "Amlogic s905X HG680P",
              "Amlogic s905X B860H",
              "Amlogic s905X Nexbox A95X",
              "Amlogic s905X2",
              "Amlogic s905X2 KM3",
              "Amlogic s905X2 X96 Max 2G",
              "Amlogic s905X3",
              "Amlogic s905X3 H96 Max",
              "Amlogic s905X3 HK1",
              "Amlogic s905X3 X96 Max",
              "Amlogic s905X4",
              "Amlogic s912",
              "Amlogic s912 H96 Pro Plus",
              "Amlogic s912 X92",
              "Allwinner H5 Orange Pi Zero Plus2",
              "Allwinner H5 Orange Pi Zero Plus",
              "Allwinner H5 Orange Pi Prime",
              "Allwinner H5 Orange Pi PC2",
              "Allwinner H6 Orange Pi Lite2",
              "Allwinner H6 Orange Pi 1 Plus",
              "Allwinner H6 Orange Pi 3",
              "Allwinner H6 Orange Pi 3 LTS",
              "Allwinner H616 Orange Pi Zero2",
              "Allwinner H618 Orange Pi Zero2W",
              "Allwinner H618 Orange Pi Zero3",
              "Rockchip rk3318 H96-MAX",
              "Rockchip rk3566 Orange Pi 3B",
              "Rockchip rk3588s Orange Pi 5"
            ]
          }
          EOJ
          )

          if [ "${{ github.event.inputs.target }}" == "all-device" ]; then
            echo "target=$(echo "$TARGET_JSON" | jq -c '.target')" >> $GITHUB_OUTPUT
          else
            echo "target=$(jq -nc --arg d "${{ github.event.inputs.target }}" '[$d]')" >> $GITHUB_OUTPUT
          fi

      - name: Setup Release Environment
        id: setupenv
        run: |
          sudo timedatectl set-timezone "${{ env.TZ }}"

          echo "BASE=$BASE" >> $GITHUB_OUTPUT
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT

          DATE=$(date +'%d%m%Y')
          DATETIME=$(date +'%d.%m.%Y-%H:%M:%S')
          DATEMONTH=$(date +"%B-%Y" | awk '{print tolower($0)}')

          echo "DATE=$DATE" >> $GITHUB_OUTPUT
          echo "DATETIME=$DATETIME" >> $GITHUB_OUTPUT
          echo "DATEMONTH=$DATEMONTH" >> $GITHUB_OUTPUT

          if [ "${BASE}" == "openwrt" ]; then
            RELEASE_NAME="RTA-WRT-OpenWRT-${BRANCH}-${DATE}"
            RELEASE_TAG="rtawrt-openwrt-${BRANCH}-${DATE}"
            echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_OUTPUT
            echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
          elif [ "${BASE}" == "immortalwrt" ]; then
            RELEASE_NAME="RTA-WRT-ImmortalWRT-${BRANCH}-${DATE}"
            RELEASE_TAG="rtawrt-immortalwrt-${BRANCH}-${DATE}"
            echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_OUTPUT
            echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
          fi
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.setupenv.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.setupenv.outputs.release_tag }}
          name: ${{ steps.setupenv.outputs.release_name }}
          prerelease: ${{ github.ref_name == 'dev' }}
          body: |
            # ðŸš€ RTA-WRT - Release Information
          generate_release_notes: true

  build-firmware:
    name: Build ${{ matrix.target }} Firmware
    needs: prebuild
    runs-on: ubuntu-22.04
    continue-on-error: true
    env:
      BASE: ${{ needs.prebuild.outputs.base }}
      BRANCH: ${{ needs.prebuild.outputs.branch }}
      DATE: ${{ needs.prebuild.outputs.date }}
      DATETIME: ${{ needs.prebuild.outputs.datetime }}
      DATEMONTH: ${{ needs.prebuild.outputs.datemonth }}
      RELEASE_NAME: ${{ needs.prebuild.outputs.release_name }}
      RELEASE_TAG: ${{ needs.prebuild.outputs.release_tag }}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.prebuild.outputs.target) }}

    steps:
      - name: Initialization environment
        id: init
        run: |
          sudo -E apt-get -y update
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt)
          sudo timedatectl set-timezone "${{ env.TZ }}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: origin
          fetch-depth: 1

      - name: Setup Build Variables
        id: variables
        run: |
          . ./scripts/0-includes.sh

          MATRIXTARGET="${{ matrix.target }}"
          echo "MATRIXTARGET=$MATRIXTARGET" >> $GITHUB_ENV

          # Common configuration function
          configure_target() {
            local profile=$1
            local target_system=$2
            local target_name=$3
            local arch1=$4
            local arch2=$5
            local arch3=$6
            local type=$7
            echo "PROFILE=$profile" >> $GITHUB_ENV
            echo "TARGET_SYSTEM=$target_system" >> $GITHUB_ENV
            echo "TARGET_NAME=$target_name" >> $GITHUB_ENV
            echo "ARCH_1=$arch1" >> $GITHUB_ENV
            echo "ARCH_2=$arch2" >> $GITHUB_ENV
            echo "ARCH_3=$arch3" >> $GITHUB_ENV
            echo "TYPE=$type" >> $GITHUB_ENV
          }

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download Image Builder
        id: download
        if: steps.variables.outputs.status == 'success'
        run: |
          cd origin
          bash scripts/1-download_image.sh

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download Packages
        id: packages
        if: steps.download.outputs.status == 'success'
        run: |
          cd ${WORK_DIR}
          chmod +x scripts/PACKAGES.sh
          ./scripts/PACKAGES.sh

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Apply Patches and Misc
        id: customize
        if: steps.packages.outputs.status == 'success'
        run: |
          cd ${WORK_DIR}

          # Apply patches
          chmod +x scripts/PATCH.sh
          ./scripts/PATCH.sh

          # Apply miscellaneous changes
          chmod +x scripts/MISC.sh
          ./scripts/MISC.sh

          # Configure tunnel apps
          chmod +x scripts/TUNNEL.sh
          ./scripts/TUNNEL.sh

          df -hT ${PWD}
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Build OpenWrt Images
        id: build
        if: steps.customize.outputs.status == 'success'
        run: |
          cd ${WORK_DIR}
          mkdir -p compiled_images
          chmod +x make-image.sh

          # Clean if requested
          if [ "${CLEAN}" == "true" ]; then
            make clean
          fi
            
          # Build image
          time ./make-image.sh ${PROFILE}
            
          # Move and rename output files
          if [[ "$TYPE" =~ ^(OPHUB|ULO)$ ]]; then
              for file in bin/targets/"${TARGET_SYSTEM}"/*-rootfs.tar.gz; do
                if [ -f "$file" ]; then
                  new_name="RTA-WRT_$(basename "$file" -rootfs.tar.gz)-rootfs.tar.gz"
                  mv "$file" compiled_images/$new_name
                fi
              done
          else
              for file in bin/targets/"${TARGET_SYSTEM}"/*.img.gz; do
                if [ -f "$file" ]; then
                  new_name="RTA-WRT_$(basename "$file" .img.gz).img.gz"
                  mv "$file" compiled_images/$new_name
                fi
              done
          fi


          echo "Images built successfully:"
          ls -la compiled_images/
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Repack OpenWrt
        id: repack
        if: steps.build.outputs.status == 'success'
        run: |
          cd ${WORKING_DIR}
          chmod +x scripts/REPACKWRT.sh
          echo "Repacking OpenWrt images ${TYPE}..."
          if [[ "$TYPE" =~ ^(OPHUB|ULO)$ ]]; then
            ./scripts/REPACKWRT.sh "$TYPE" "$TARGET_BUILD" "$KERNEL"
          fi
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Rename OpenWrt
        id: rename
        if: steps.modsdcard.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}
          chmod +x scripts/RENAMEFW.sh
          ./scripts/RENAMEFW.sh
          echo "status=success" >> "$GITHUB_OUTPUT"

      - name: Create Release
        if: steps.rename.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          files: ${{ env.WORKING_DIR }}/compiled_images/*.img.gz
          prerelease: ${{ github.ref_name == 'dev' }}

      - name: Upload file links as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-links-${{ matrix.target }}
          path: /home/runner/work/RTA-WRT/RTA-WRT/imagebuilder/compiled_images//artifacts.txt

      - name: Clean Storage
        run: |
          sudo rm -rf ${{ env.WORKING_DIR }}