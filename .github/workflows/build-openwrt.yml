name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target device'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - x86_64
          - ramips_mt7621
          - ath79_generic
          - mediatek_filogic
          - bcm27xx_bcm2711
      source:
        description: 'OpenWrt source'
        required: true
        default: 'openwrt'
        type: choice
        options:
          - openwrt
          - lede
          - immortalwrt
      branch:
        description: 'Source branch'
        required: true
        default: 'master'
        type: string

env:
  REPO_URL_OPENWRT: https://github.com/openwrt/openwrt
  REPO_URL_LEDE: https://github.com/coolsnowwolf/lede
  REPO_URL_IMMORTALWRT: https://github.com/immortalwrt/immortalwrt
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: configs/${{ github.event.inputs.source }}/${{ github.event.inputs.branch }}/${{ github.event.inputs.target }}.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Jakarta

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        echo "Free space before cleanup:"
        df -h
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/share/swift
        sudo rm -rf /usr/local/.ghcup
        sudo apt-get remove -y --purge \
          firefox \
          google-chrome-stable \
          microsoft-edge-stable \
          hhvm \
          dotnet-sdk-* \
          aspnetcore-* \
          mono-* \
          mysql-* \
          postgresql-* \
          2>/dev/null || true
        sudo apt-get autoremove -y
        sudo apt-get clean
        echo "Free space after cleanup:"
        df -h

    - name: Initialize environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* || true
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git \
          libncurses5-dev libncursesw5-dev libssl-dev \
          python3-setuptools python3-dev python3-distutils python3-pyelftools \
          rsync swig unzip zlib1g-dev file wget zstd shfmt jq curl \
          subversion qemu-utils ccache
        python3 -m pip install --upgrade pip setuptools wheel
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        case "${{ github.event.inputs.source }}" in
          "openwrt")
            REPO_URL=$REPO_URL_OPENWRT
            ;;
          "lede")
            REPO_URL=$REPO_URL_LEDE
            ;;
          "immortalwrt")
            REPO_URL=$REPO_URL_IMMORTALWRT
            ;;
          *)
            echo "Unknown source: ${{ github.event.inputs.source }}"
            exit 1
            ;;
        esac
        
        echo "Cloning $REPO_URL branch ${{ github.event.inputs.branch }}"
        git clone --depth=1 $REPO_URL -b ${{ github.event.inputs.branch }} openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Cache feeds
      uses: actions/cache@v4
      with:
        path: |
          ~/.ccache
          /workdir/openwrt/feeds
        key: ${{ runner.os }}-feeds-${{ github.event.inputs.source }}-${{ github.event.inputs.branch }}-${{ hashFiles('feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-feeds-${{ github.event.inputs.source }}-${{ github.event.inputs.branch }}-
          ${{ runner.os }}-feeds-${{ github.event.inputs.source }}-
          ${{ runner.os }}-feeds-

    - name: Load custom feeds
      run: |
        if [ -e "$FEEDS_CONF" ]; then
          cp "$FEEDS_CONF" openwrt/feeds.conf.default
        fi
        if [ -e "$DIY_P1_SH" ]; then
          chmod +x "$DIY_P1_SH"
          cd openwrt
          "$GITHUB_WORKSPACE/$DIY_P1_SH ${{ github.event.inputs.target }}"
        fi

    - name: Update feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a

    - name: Install feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        if [ -e files ]; then
          cp -r files openwrt/
        fi
        if [ -e "$CONFIG_FILE" ]; then
          cp "$CONFIG_FILE" openwrt/.config
        else
          echo "Warning: Config file $CONFIG_FILE not found!"
          touch openwrt/.config
        fi
        if [ -e configs/universal.config ]; then
          cat configs/universal.config >> openwrt/.config
        fi
        if [ -e "$DIY_P2_SH" ]; then
          chmod +x "$DIY_P2_SH"
          cd openwrt
          "$GITHUB_WORKSPACE/$DIY_P2_SH ${{ github.event.inputs.target }}"
        fi

    - name: Generate default config
      run: |
        cd openwrt
        make defconfig
        cat .config

    - name: Download packages
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        
        # Extract device name
        if grep -q '^CONFIG_TARGET.*DEVICE.*=y' .config; then
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        else
          echo "DEVICE_NAME=_${{ github.event.inputs.target }}" >> $GITHUB_ENV
        fi
        
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@v4
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin
        retention-days: 7

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        retention-days: 30

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        
        # Create release notes
        cat > release.txt << EOF
        ## OpenWrt Build Information
        
        **Target**: ${{ github.event.inputs.target }}
        **Source**: ${{ github.event.inputs.source }}
        **Branch**: ${{ github.event.inputs.branch }}
        **Build Date**: $(date)
        **Commit**: $(cd openwrt && git rev-parse HEAD)
        
        ### Files in this release:
        $(cd ${{ env.FIRMWARE }} && ls -la)
        EOF
        
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
        draft: false
        prerelease: false

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old releases
      uses: dev-drprasad/delete-older-releases@v0.3.4
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}