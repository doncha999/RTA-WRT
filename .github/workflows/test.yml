name: RTA-WRT Firmware Builder

# Workflow permissions
permissions:
  contents: write        # Required for creating releases and uploading assets
  packages: read         # Access to GitHub packages if needed
  issues: write          # Create/modify issues for notifications
  pull-requests: write   # Create/modify PRs if needed

on:
  workflow_dispatch:
    inputs:
      base:
        description: "Select the Base Build"
        required: true
        default: "openwrt"
        type: choice
        options:
          - openwrt
          - immortalwrt
      branch:
        description: "Select the Branch Build"
        required: true
        default: "stable"
        type: choice
        options:
          - stable
          - snapshot
          - old-stable
      target:
        description: "Select device board"
        required: false
        default: "all-device"
        type: choice
        options:
          - all-device
          - Raspberry Pi 3
          - Raspberry Pi 4
          - x86_64
          - Amlogic s905
          - Amlogic s905 Beelink Mini
          - Amlogic s905 MXQ Pro Plus
          - Amlogic s905W
          - Amlogic s905W W95
          - Amlogic s905W X96 Mini
          - Amlogic s905W X96W
          - Amlogic s905X HG680P
          - Amlogic s905X B860H
          - Amlogic s905X Nexbox A95X
          - Amlogic s905X2
          - Amlogic s905X2 KM3
          - Amlogic s905X2 X96 Max 2G
          - Amlogic s905X3
          - Amlogic s905X3 H96 Max
          - Amlogic s905X3 HK1
          - Amlogic s905X3 X96 Max
          - Amlogic s905X4
          - Amlogic s912
          - Amlogic s912 H96 Pro Plus
          - Amlogic s912 X92
          - Allwinner H5 Orange Pi Zero Plus2
          - Allwinner H5 Orange Pi Zero Plus
          - Allwinner H5 Orange Pi Prime
          - Allwinner H5 Orange Pi PC2
          - Allwinner H6 Orange Pi Lite2
          - Allwinner H6 Orange Pi 1 Plus
          - Allwinner H6 Orange Pi 3
          - Allwinner H6 Orange Pi 3 LTS
          - Allwinner H616 Orange Pi Zero2
          - Allwinner H618 Orange Pi Zero2W
          - Allwinner H618 Orange Pi Zero3
          - Rockchip rk3318 H96-MAX
          - Rockchip rk3566 Orange Pi 3B
          - Rockchip rk3588s Orange Pi 5
      clean_build:
        description: "Perform clean build (removes cache)"
        required: false
        default: false
        type: boolean
      debug_mode:
        description: "Enable debug mode (verbose logging)"
        required: false
        default: false
        type: boolean

# Global environment variables
env:
  TZ: Asia/Jakarta
  DEBIAN_FRONTEND: noninteractive
  FORCE_UNSAFE_CONFIGURE: 1

jobs:
  # =============================================================================
  # Preparation Job - Setup environment and create release
  # =============================================================================
  preparation:
    runs-on: ubuntu-22.04
    name: 🔧 Preparation
    outputs:
      target: ${{ steps.set-matrix.outputs.target }}
      base: ${{ steps.setup-env.outputs.base }}
      branch: ${{ steps.setup-env.outputs.branch }}
      date: ${{ steps.setup-env.outputs.date }}
      datetime: ${{ steps.setup-env.outputs.datetime }}
      datemonth: ${{ steps.setup-env.outputs.datemonth }}
      release_name: ${{ steps.setup-env.outputs.release_name }}
      release_tag: ${{ steps.setup-env.outputs.release_tag }}
      debug_mode: ${{ steps.setup-env.outputs.debug_mode }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 1

      - name: 🎯 Setup Target Matrix
        id: set-matrix
        run: |
          echo "::notice::Selected target option: ${{ github.event.inputs.target }}"
          
          # Define all available targets
          ALL_TARGETS='[
            "Raspberry Pi 3", "Raspberry Pi 4", "x86_64",
            "Amlogic s905", "Amlogic s905 Beelink Mini", "Amlogic s905 MXQ Pro Plus",
            "Amlogic s905W", "Amlogic s905W W95", "Amlogic s905W X96 Mini", "Amlogic s905W X96W",
            "Amlogic s905X HG680P", "Amlogic s905X B860H", "Amlogic s905X Nexbox A95X",
            "Amlogic s905X2", "Amlogic s905X2 KM3", "Amlogic s905X2 X96 Max 2G",
            "Amlogic s905X3", "Amlogic s905X3 H96 Max", "Amlogic s905X3 HK1", "Amlogic s905X3 X96 Max",
            "Amlogic s905X4", "Amlogic s912", "Amlogic s912 H96 Pro Plus", "Amlogic s912 X92",
            "Allwinner H5 Orange Pi Zero Plus2", "Allwinner H5 Orange Pi Zero Plus", "Allwinner H5 Orange Pi Prime", "Allwinner H5 Orange Pi PC2",
            "Allwinner H6 Orange Pi Lite2", "Allwinner H6 Orange Pi 1 Plus", "Allwinner H6 Orange Pi 3", "Allwinner H6 Orange Pi 3 LTS",
            "Allwinner H616 Orange Pi Zero2", "Allwinner H618 Orange Pi Zero2W", "Allwinner H618 Orange Pi Zero3",
            "Rockchip rk3318 H96-MAX", "Rockchip rk3566 Orange Pi 3B", "Rockchip rk3588s Orange Pi 5"
          ]'

          if [ "${{ github.event.inputs.target }}" == "all-device" ]; then
            echo "target=$(echo "$ALL_TARGETS" | jq -c '.')" >> $GITHUB_OUTPUT
            echo "::notice::Building for all devices ($(echo "$ALL_TARGETS" | jq '. | length') targets)"
          else
            echo "target=$(jq -nc --arg d "${{ github.event.inputs.target }}" '[$d]')" >> $GITHUB_OUTPUT
            echo "::notice::Building for single device: ${{ github.event.inputs.target }}"
          fi

      - name: 🌍 Setup Release Environment
        id: setup-env
        run: |
          # Set timezone
          sudo timedatectl set-timezone "${{ env.TZ }}"

          # Input validation
          BASE="${{ github.event.inputs.base }}"
          BRANCH="${{ github.event.inputs.branch }}"
          DEBUG_MODE="${{ github.event.inputs.debug_mode }}"
          
          # Validate inputs
          case "${BASE}" in
            "openwrt"|"immortalwrt") ;;
            *) echo "::error::Invalid base: ${BASE}"; exit 1 ;;
          esac
          
          case "${BRANCH}" in
            "stable"|"snapshot"|"old-stable") ;;
            *) echo "::error::Invalid branch: ${BRANCH}"; exit 1 ;;
          esac

          # Set outputs
          echo "base=${BASE}" >> $GITHUB_OUTPUT
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
          echo "debug_mode=${DEBUG_MODE}" >> $GITHUB_OUTPUT

          # Generate timestamps
          DATE=$(date +'%d%m%Y')
          DATETIME=$(date +'%d.%m.%Y-%H:%M:%S')
          DATEMONTH=$(date +"%B-%Y" | awk '{print tolower($0)}')

          echo "date=${DATE}" >> $GITHUB_OUTPUT
          echo "datetime=${DATETIME}" >> $GITHUB_OUTPUT
          echo "datemonth=${DATEMONTH}" >> $GITHUB_OUTPUT

          # Generate release name and tag
          case "${BRANCH}" in
            "stable") TAG_BRANCH="Stable" ;;
            "snapshot") TAG_BRANCH="Snapshot" ;;
            "old-stable") TAG_BRANCH="Old-Stable" ;;
          esac

          case "${BASE}" in
            "openwrt")
              RELEASE_NAME="RTA-WRT-OpenWRT-${TAG_BRANCH}-${DATE}"
              RELEASE_TAG="rtawrt-openwrt-${BRANCH}-${DATE}"
              ;;
            "immortalwrt")
              RELEASE_NAME="RTA-WRT-ImmortalWRT-${TAG_BRANCH}-${DATE}"
              RELEASE_TAG="rtawrt-immortalwrt-${BRANCH}-${DATE}"
              ;;
          esac

          echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

          echo "::notice::Release will be created as: ${RELEASE_NAME} (${RELEASE_TAG})"

      - name: 🚀 Create GitHub Release
        if: steps.setup-env.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.setup-env.outputs.release_tag }}
          name: ${{ steps.setup-env.outputs.release_name }}
          prerelease: ${{ github.ref_name == 'dev' }}
          generate_release_notes: true
          body: |
            # 🚀 RTA-WRT Firmware Release
            
            ## 📋 Build Information
            - **Base:** `${{ github.event.inputs.base }}`
            - **Branch:** `${{ github.event.inputs.branch }}`
            - **Target:** `${{ github.event.inputs.target }}`
            - **Build Date:** `${{ steps.setup-env.outputs.datetime }}`
            - **Clean Build:** `${{ github.event.inputs.clean_build }}`
            - **Debug Mode:** `${{ github.event.inputs.debug_mode }}`
            
            ## 🔧 Build Configuration
            This is an automated build of RTA-WRT firmware built from the latest source code.
            
            ## 📦 Available Files
            Firmware files will be uploaded as the build completes. Check back shortly for:
            - `.img.gz` - Compressed disk images
            - `.img` - Raw disk images  
            - `.bin` - Binary firmware files
            
            ## ⚠️ Important Notes
            - Always verify firmware compatibility with your device before flashing
            - Keep a backup of your current firmware
            - Follow proper flashing procedures for your device

  # =============================================================================
  # Firmware Build Job - Build firmware for each target
  # =============================================================================
  build-firmware:
    name: 🔨 Build ${{ matrix.target }}
    needs: preparation
    runs-on: ubuntu-22.04
    continue-on-error: true
    timeout-minutes: 480  # 8 hours maximum
    
    # Environment variables from preparation job
    env:
      BASE: ${{ needs.preparation.outputs.base }}
      BRANCH: ${{ needs.preparation.outputs.branch }}
      DATE: ${{ needs.preparation.outputs.date }}
      DATETIME: ${{ needs.preparation.outputs.datetime }}
      DATEMONTH: ${{ needs.preparation.outputs.datemonth }}
      RELEASE_NAME: ${{ needs.preparation.outputs.release_name }}
      RELEASE_TAG: ${{ needs.preparation.outputs.release_tag }}
      DEBUG_MODE: ${{ needs.preparation.outputs.debug_mode }}
      TARGET: ${{ matrix.target }}

    strategy:
      fail-fast: false
      max-parallel: 3  # Limit parallel builds to manage resource usage
      matrix:
        target: ${{ fromJSON(needs.preparation.outputs.target) }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 1

      - name: 🧹 Free Disk Space
        run: |
          echo "::group::Initial Disk Usage"
          df -hT
          echo "::endgroup::"
          
          echo "::group::Cleaning Up System"
          # Remove unnecessary packages and files to free up space
          sudo apt-get autoremove -y
          sudo apt-get autoclean -y
          
          # Remove large directories that are not needed
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /opt/hostedtoolcache/CodeQL || true
          sudo rm -rf /usr/local/share/boost || true
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true
          
          # Clean Docker
          sudo docker system prune -af || true
          
          # Clear package cache
          sudo apt-get clean
          echo "::endgroup::"
          
          echo "::group::Final Disk Usage"
          df -hT
          echo "::endgroup::"

      - name: 🛠️ Initialize Build Environment
        id: init
        run: |
          set -e
          
          echo "::group::System Update"
          sudo -E apt-get -y update
          echo "::endgroup::"
          
          echo "::group::Install Build Dependencies"
          # Install required packages for OpenWrt build
          PACKAGES="ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison btrfs-progs \
                   build-essential bzip2 ca-certificates ccache cmake coreutils cpio curl device-tree-compiler \
                   fastjar flex g++-multilib gawk gcc-multilib gettext git git-core gperf gzip haveged help2man \
                   intltool jq libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev \
                   libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
                   libssl-dev libtool libz-dev lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch \
                   pigz pkgconf python2.7 python3 python3-pip python3-pyelftools python3-setuptools qemu-utils \
                   rsync scons squashfs-tools swig tar texinfo uglifyjs unzip upx upx-ucl vim wget xmlto \
                   xsltproc xxd xz-utils yasm zip zlib1g-dev zstd lolcat"
          
          sudo -E apt-get -y install $PACKAGES
          echo "::endgroup::"
          
          # Set timezone
          sudo timedatectl set-timezone "${{ env.TZ }}"
          
          # Set Git configuration to avoid warnings
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 🔨 Build Firmware
        id: build
        run: |
          set -e
          
          # Enable debug mode if requested
          if [ "${{ env.DEBUG_MODE }}" = "true" ]; then
            set -x
            echo "::notice::Debug mode enabled - verbose logging active"
          fi

          # Make scripts executable
          chmod +x ./build.sh
          chmod +x ./scripts/0-includes.sh
          
          # Source includes
          source ./scripts/0-includes.sh

          echo "::group::🔨 Building Firmware"
          echo "::notice::Starting build for ${{ matrix.target }}"
          
          build_firmware() {
            local base branch target_system target_name profile arch packages_include packages_exclude

            base="${{ env.BASE }}"
            branch=$(firmware_id "TAG" "${{ env.BRANCH }}" "${base}")
            target_system=$(device_name "TARGET_SYSTEM" "${{ matrix.target }}")
            target_name=$(device_name "TARGET_NAME" "${{ matrix.target }}")
            profile=$(device_name "PROFILE" "${{ matrix.target }}")
            arch=$(device_name "ARCH_2" "${{ matrix.target }}")
            packages_include=""
            packages_exclude=""

            echo "::notice::Build Configuration:"
            echo "  - Base: ${base}"
            echo "  - Branch: ${branch}"
            echo "  - Target System: ${target_system}"
            echo "  - Target Name: ${target_name}"
            echo "  - Profile: ${profile}"
            echo "  - Architecture: ${arch}"

            # Clean build if requested
            if [ "${{ github.event.inputs.clean_build }}" = "true" ]; then
              echo "::notice::Performing clean build"
              rm -rf openwrt-build || true
            fi

            # Run the build script
            ./build.sh "$base" "$branch" "$target_system" "$target_name" "$profile" "$arch" "$packages_include" "$packages_exclude" "{{ github.event.inputs.branch }}"
            
            return $?
          }

          # Execute build and handle errors
          if build_firmware; then
            echo "::notice::✅ Build completed successfully for ${{ matrix.target }}"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "::error::❌ Build failed for ${{ matrix.target }}"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::endgroup::"

      - name: 📋 Collect Build Artifacts
        id: collect
        if: steps.build.outputs.status == 'success'
        run: |
          echo "::group::📋 Collecting Build Artifacts"
          
          # Find built firmware files
          FIRMWARE_FILES=""
          BUILD_DIR="${{ github.workspace }}/openwrt-build/bin/targets"
          
          if [ -d "$BUILD_DIR" ]; then
            # Find all firmware files
            find "$BUILD_DIR" -type f \( -name "*.img.gz" -o -name "*.img" -o -name "*.bin" \) | while read -r file; do
              echo "::notice::Found firmware file: $(basename "$file")"
              echo "  - Size: $(du -h "$file" | cut -f1)"
              echo "  - Path: $file"
            done
            
            # Check if any files were found
            FILE_COUNT=$(find "$BUILD_DIR" -type f \( -name "*.img.gz" -o -name "*.img" -o -name "*.bin" \) | wc -l)
            echo "::notice::Total firmware files found: $FILE_COUNT"
            
            if [ "$FILE_COUNT" -gt 0 ]; then
              echo "status=success" >> $GITHUB_OUTPUT
            else
              echo "::warning::No firmware files found in build directory"
              echo "status=no_files" >> $GITHUB_OUTPUT
            fi
          else
            echo "::error::Build directory not found: $BUILD_DIR"
            echo "status=no_build_dir" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"

      - name: 📤 Upload Firmware to Release
        if: steps.collect.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: ${{ env.RELEASE_NAME }}
          files: |
            ${{ github.workspace }}/openwrt-build/bin/targets/*/*/*.img.gz
            ${{ github.workspace }}/openwrt-build/bin/targets/*/*/*.img
            ${{ github.workspace }}/openwrt-build/bin/targets/*/*/*.bin
          fail_on_unmatched_files: false

      - name: 📄 Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.target }}-${{ env.DATE }}
          path: ${{ github.workspace }}/openwrt-build/build.log
          retention-days: 30
          if-no-files-found: warn

      - name: 📊 Build Summary
        if: always()
        run: |
          # Create build summary
          {
            echo "## 🔨 Build Summary for \`${{ matrix.target }}\`"
            echo ""
            
            # Status
            if [ "${{ steps.build.outputs.status }}" = "success" ]; then
              echo "### ✅ Status: **SUCCESS**"
            else
              echo "### ❌ Status: **FAILED**"
            fi
            echo ""
            
            # Configuration
            echo "### 📋 Configuration"
            echo "| Parameter | Value |"
            echo "|-----------|-------|"
            echo "| Base | \`${{ env.BASE }}\` |"
            echo "| Branch | \`${{ env.BRANCH }}\` |"
            echo "| Target | \`${{ matrix.target }}\` |"
            echo "| Clean Build | \`${{ github.event.inputs.clean_build }}\` |"
            echo "| Debug Mode | \`${{ env.DEBUG_MODE }}\` |"
            echo "| Build Time | \`${{ env.DATETIME }}\` |"
            echo ""
            
            # Files (if successful)
            if [ "${{ steps.collect.outputs.status }}" = "success" ]; then
              echo "### 📦 Generated Files"
              BUILD_DIR="${{ github.workspace }}/openwrt-build/bin/targets"
              if [ -d "$BUILD_DIR" ]; then
                find "$BUILD_DIR" -type f \( -name "*.img.gz" -o -name "*.img" -o -name "*.bin" \) | while read -r file; do
                  filename=$(basename "$file")
                  size=$(du -h "$file" | cut -f1)
                  echo "- \`$filename\` ($size)"
                done
              fi
              echo ""
            fi
            
            # Disk usage
            echo "### 💾 Disk Usage"
            echo "\`\`\`"
            df -h | grep -E "(Filesystem|/dev/root|tmpfs.*/$)"
            echo "\`\`\`"
          } >> $GITHUB_STEP_SUMMARY

      - name: 🧹 Cleanup Storage
        if: always()
        run: |
          echo "::group::🧹 Cleaning up build artifacts"
          
          # Remove build directory to save space
          sudo rm -rf "${{ github.workspace }}/openwrt-build" || true
          
          # Clean Docker again
          sudo docker system prune -af || true
          
          # Clean package cache
          sudo apt-get clean || true
          
          echo "::notice::Cleanup completed"
          echo "::endgroup::"

  # =============================================================================
  # Post-build Job - Summary and notifications
  # =============================================================================
  post-build:
    name: 📋 Post-Build Summary
    needs: [preparation, build-firmware]
    runs-on: ubuntu-22.04
    if: always()
    
    steps:
      - name: 📊 Generate Build Report
        run: |
          # Create comprehensive build report
          {
            echo "# 🚀 RTA-WRT Build Report"
            echo ""
            echo "**Release:** \`${{ needs.preparation.outputs.release_name }}\`"
            echo "**Tag:** \`${{ needs.preparation.outputs.release_tag }}\`"
            echo "**Date:** \`${{ needs.preparation.outputs.datetime }}\`"
            echo ""
            
            echo "## 📋 Build Configuration"
            echo "- **Base:** \`${{ github.event.inputs.base }}\`"
            echo "- **Branch:** \`${{ github.event.inputs.branch }}\`"
            echo "- **Target:** \`${{ github.event.inputs.target }}\`"
            echo "- **Clean Build:** \`${{ github.event.inputs.clean_build }}\`"
            echo "- **Debug Mode:** \`${{ github.event.inputs.debug_mode }}\`"
            echo ""
            
            echo "## 🎯 Build Results"
            echo "Check individual job results above for detailed build information."
            echo ""
            
            echo "## 📦 Release"
            echo "All successful builds have been uploaded to the GitHub release:"
            echo "[\`${{ needs.preparation.outputs.release_name }}\`](https://github.com/${{ github.repository }}/releases/tag/${{ needs.preparation.outputs.release_tag }})"
            echo ""
            
            echo "## ⚠️ Important Notes"
            echo "- Always verify firmware compatibility before flashing"
            echo "- Keep backups of your current firmware"
            echo "- Follow proper flashing procedures for your device"
          } >> $GITHUB_STEP_SUMMARY