name: Generate OpenWrt Config Matrix (Fast Echo Method)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - main

permissions:
  contents: write  # Ubah dari 'read' ke 'write'
  pages: write
  id-token: write
  actions: read    # Tambahkan permission ini

env:
  REPO_URL_OPENWRT: https://github.com/openwrt/openwrt
  REPO_URL_LEDE: https://github.com/coolsnowwolf/lede
  REPO_URL_IMMORTALWRT: https://github.com/immortalwrt/immortalwrt
  TZ: Asia/Jakarta
  VERSI_OPENWRT: 'openwrt-24.10'
  VERSI_LEDE: 'master'
  VERSI_IMMORTALWRT: 'openwrt-24.10'

jobs:
  generate_matrix:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        source: ['openwrt', 'lede', 'immortalwrt']
        target: ['x86_64', 'armsr-armv8', 'bcm27xx_bcm2710', 'bcm27xx_bcm2711']
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        persist-credentials: true

    - name: Install build prerequisites
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk \
          gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
          python3 python3-pip rsync unzip zlib1g-dev file wget zstd
        sudo timedatectl set-timezone "$TZ"

    - name: Clone OpenWrt source (${{ matrix.source }})
      run: |
        case "${{ matrix.source }}" in
          "openwrt")
            REPO=$REPO_URL_OPENWRT
            BRANCH=$VERSI_OPENWRT
            ;;
          "lede")
            REPO=$REPO_URL_LEDE
            BRANCH=$VERSI_LEDE
            ;;
          "immortalwrt")
            REPO=$REPO_URL_IMMORTALWRT
            BRANCH=$VERSI_IMMORTALWRT
            ;;
        esac
        git clone --depth 1 -b "$BRANCH" "$REPO" openwrt
        echo "CURRENT_VERSI=$BRANCH" >> $GITHUB_ENV

    - name: Generate config from echo target (${{ matrix.target }})
      run: |
        cd openwrt

        echo "::group::Write base target config"
        case "${{ matrix.target }}" in
          "x86_64")
            cat <<EOF > .config
        CONFIG_TARGET_x86=y
        CONFIG_TARGET_x86_64=y
        CONFIG_TARGET_x86_64_DEVICE_generic=y
        EOF
            ;;
          "armsr-armv8")
            cat <<EOF > .config
        CONFIG_TARGET_armsr=y
        CONFIG_TARGET_armsr_armv8=y
        CONFIG_TARGET_armsr_armv8_DEVICE_generic=y
        EOF
            ;;
          "bcm27xx_bcm2710")
            cat <<EOF > .config
        CONFIG_TARGET_bcm27xx=y
        CONFIG_TARGET_bcm27xx_bcm2710=y
        CONFIG_TARGET_bcm27xx_bcm2710_DEVICE_rpi-3=y
        EOF
            ;;
          "bcm27xx_bcm2711")
            cat <<EOF > .config
        CONFIG_TARGET_bcm27xx=y
        CONFIG_TARGET_bcm27xx_bcm2711=y
        CONFIG_TARGET_bcm27xx_bcm2711_DEVICE_rpi-4=y
        EOF
            ;;
        esac
        echo "::endgroup::"

        echo "::group::make defconfig"
        make defconfig
        echo "::endgroup::"

        echo "::group::Save output config"
        CFG_DIR="configs/${{ matrix.source }}/${{ env.CURRENT_VERSI }}"
        mkdir -p "$CFG_DIR"
        cp .config "$CFG_DIR/${{ matrix.target }}.config"
        echo "::endgroup::"

    - name: Upload generated configs
      uses: actions/upload-artifact@v4
      with:
        name: configs-${{ matrix.source }}-${{ matrix.target }}
        path: configs/
        retention-days: 1

  commit_configs:
    needs: generate_matrix
    runs-on: ubuntu-22.04
    permissions:
      contents: write  # Pastikan permission write
      pages: write
      id-token: write
    if: always()
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        persist-credentials: true

    - name: Download all generated configs
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: configs-*
        merge-multiple: true

    - name: Organize config files
      run: |
        # Remove existing configs directory to avoid conflicts
        rm -rf configs
        
        # Create new configs directory structure
        mkdir -p configs
        
        # Debug: List all downloaded artifacts
        echo "Downloaded artifacts structure:"
        find artifacts -type f -name "*.config" | sort || echo "No .config files found"
        find artifacts -type f | head -20 | sort || echo "No files found"
        
        # Copy all config files from artifacts (handle different structures)
        if [ -d "artifacts" ]; then
          # Method 1: If configs are in artifacts/configs/
          if [ -d "artifacts/configs" ]; then
            echo "Found artifacts/configs directory"
            cp -r artifacts/configs/* configs/
          else
            # Method 2: If configs are directly in artifacts/
            echo "Searching for .config files in artifacts/"
            find artifacts -name "*.config" -type f | while read -r config_file; do
              # Extract the relative path and create directory structure
              rel_path=$(echo "$config_file" | sed 's|artifacts/||')
              target_dir="configs/$(dirname "$rel_path")"
              mkdir -p "$target_dir"
              cp "$config_file" "$target_dir/"
              echo "Copied: $config_file -> $target_dir/"
            done
          fi
        fi
        
        # Clean up artifacts
        rm -rf artifacts
        
        # List generated configs for debugging
        echo "Generated config files:"
        find configs -name "*.config" -type f | sort
        
        # Show config file sizes for verification
        echo "Config file sizes:"
        find configs -name "*.config" -type f -exec ls -la {} \;

    - name: Commit and push config changes
      run: |
        git config --local user.name "GitHub Action"
        git config --local user.email "actions-user@users.noreply.github.com"
        
        # Add all config files
        git add configs/
        
        if ! git diff --staged --quiet; then
          git commit -m "üöÄ Update Config - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            
          for i in {1..3}; do
            if git push; then
              echo "‚úÖ Successfully pushed updates"
              break
            else
              echo "‚ö†Ô∏è Push failed, retrying... ($i/3)"
              sleep 2
              git pull --rebase origin main
            fi
          done
        else
          echo "‚úÖ No new packages to commit"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}